<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--    把对象的创建交给Spring-->
<!--    spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
-->

<!--    创建Bean的三种方式-->
<!--    第一种方式使用默认构造函数
         在Spring的配置文件中使用bean标签配以id和class属性之后且没有其他属性标签时
         采用就是默认构造函数创建bean对象，如果此时没有默认构造函数此时对象就无法创建
         -->
<!--    <bean id ="accountService" class="com.itheima.service.impl.Accountserviceimpl"> </bean>-->

<!--    第二种方式 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象并存入spring容器）

-->
<!--    <bean id ="InstanceFactory" class="com.itheima.factory.InstanceFactory"> </bean>-->
<!--    <bean id ="accountService" factory-bean="InstanceFactory" factory-method="getAccountService"></bean>-->
<!--第三种方法
使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象并存入Spring容器）
-->
<!--    <bean id ="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>-->
<!--bean的作用范围
    bean标签的scope属性
    作用：用于指定bean的作用范围
    取值：常用的是多例和单例
        singleton 单例
        prototype 多例的
        requset     作用于web应用的请求范围
        session     作用于web应用的会话范围
        global-session  作用于集群环境的会话范围（全局会话范围），不是集群环境时就是session
-->
<!--    <bean id ="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService" scope="prototype"></bean>-->


    <!--bean对象的生命周期
    单例对象还是多例对象
    单例对象：
            出生:当容器创建时
            活着：只有容器还在对象一直有
            死亡：容器销毁对象消亡
            总结单例对象的生命周期和容器相同
               多例对象
            出生:当我们使用对象时spring框架为我们创建
            活着：对象在使用过程中就一直活着
            死亡：当对象长时间不用且没有别的对象引用时由java的垃圾回收机制回收
            总结单例对象的生命周期和容器相同
-->
    <bean id ="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"
          scope="singleton" init-method="init" destroy-method="destory"></bean>

</beans>

